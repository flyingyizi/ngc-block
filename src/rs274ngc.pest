//! a line:
//! 1. an optional block delete character, which is a slash “/” .
//! 2. an optional line number.
//! 3. any number of words, parameter settings, and comments.
//! 4. an end of line marker (carriage return or line feed or both).

WHITESPACE = _{ " " | "\t" | "\r" | "\n" }


/// arc_tangent_combo = arc_tangent + expression + divided_by + expression .
arc_tangent_combo = { "atan" ~ expression ~ "/" ~ expression }

///binary_operation = binary_operation1 | binary_operation2 | binary_operation3 .
binary_operation = _{ binary_operation1 | binary_operation2 | binary_operation3}

///expression = left_bracket + real_value + { binary_operation + real_value } + right_bracket .
expression = { "[" ~ real_value ~ (binary_operation ~ real_value)* ~ "]"}

///line = [block_delete] + [line_number] + {segment} + end_of_line .
line ={ block_delete? ~  line_number?  ~ segment* ~ end_of_line}
///block_delete = ‘/’
block_delete = {"/"}
///line_number = letter_n + digit + [digit] + [digit] + [digit] + [digit] .
line_number = {"n" ~ ASCII_DIGIT{1,5} }
///segment = mid_line_word | comment | parameter_setting .
segment = { mid_line_word | comment | parameter_setting }
/// end_of_line = ‘ ‘ (non-printable newline character)
end_of_line = _{("\r\n" | "\n")*}


/// mid_line_word = mid_line_letter + real_value .
mid_line_word = {mid_line_letter ~ real_value}
/// parameter_setting = parameter_sign + parameter_index + equal_sign + real_value .
parameter_setting = { parameter_sign ~ parameter_index ~ "=" ~ real_value }
/// comment = message | ordinary_comment .
comment = ${ message | ordinary_comment }
///message = left_parenthesis + {white_space} + letter_m + {white_space} + letter_s + {white_space} + letter_g + {white_space} + comma + {comment_character} + "right_parenthesis" .
message = { "(" ~ white_space* ~ ^"m" ~ white_space* ~ ^"s" ~  white_space* ~ ^"g" ~ white_space* ~ "," ~ comment_character* ~ ")"}

///mid_line_letter = letter_a | letter_b | letter_c| letter_d | letter_f | letter_g | letter_h | letter_i| letter_j | letter_k | letter_l | letter_m | letter_p | letter_q | letter_r | letter_s | letter_t| letter_x | letter_y | letter_z .
/// case insensitive
mid_line_letter = {letter_a | letter_b | letter_c| letter_d | letter_f | letter_g | letter_h | letter_i| letter_j | letter_k | letter_l | letter_m | letter_p | letter_q | letter_r | letter_s | letter_t| letter_x | letter_y | letter_z}
//mid_line_letter = { ^"a" | ^"b" | ^"c" | ^"d" | ^"f" | ^"g" | ^"h" | ^"i" | ^"j" | ^"k" | ^"l" | ^"m" | ^"p" | ^"q" | ^"r" | ^"s" | ^"t" | ^"x" | ^"y" | ^"z"}
///real_value = real_number | expression | parameter_value | unary_combo .
real_value = _{ real_number | expression | parameter_value | unary_combo }
/// white_space = space | tab .
white_space={" " | "\t"}

///The term comment_character is used in the productions but not defined there. A comment character is any printable character plus space and tab, except for a left parenthesis or right parenthesis. This implies comments cannot be nested.
comment_character = {
    !(                // if the following text is not
        "("           //     left parenthesis
        | ")"        //     or right parenthesis
    )
    ~ ANY             // then consume one character
}


///ordinary_comment = left_parenthesis + {comment_character} + right_parenthesis .
ordinary_comment={ "(" ~ comment_character* ~ ")" }

///ordinary_unary_operation =absolute_value | arc_cosine | arc_sine | cosine | e_raised_to |fix_down | fix_up | natural_log_of | round | sine | square_root | tangent .
ordinary_unary_operation = _{  absolute_value | arc_cosine | arc_sine | cosine | e_raised_to |fix_down | fix_up | natural_log_of | round | sine | square_root | tangent }
absolute_value = {^"abs"}
arc_cosine = {^"acos"} 
arc_sine = {^"asin"} 
cosine = {^"cos"} 
e_raised_to = {^"exp"}
fix_down = {^"fix"} 
fix_up = {^"fup"} 
natural_log_of = {^"ln"} 
round = {^"round"} 
sine = {^"sin"} 
square_root = {^"sqrt"} 
tangent = {^"tan"}

///parameter_index = real_value .
parameter_index = _{ real_value }
///parameter_value = parameter_sign + parameter_index .
parameter_value = { "#" ~ parameter_index }
///real_number =[ plus | minus ] +(( digit + { digit } + [decimal_point] + {digit}) | ( decimal_point + digit + {digit})) .
real_number = { ("+" | "-")? ~ ((ASCII_DIGIT+ ~ "."? ~ ASCII_DIGIT* ) | ("." ~ ASCII_DIGIT+) ) }
///unary_combo = ordinary_unary_combo | arc_tangent_combo .
unary_combo = _{ ordinary_unary_combo | arc_tangent_combo }
///ordinary_unary_combo = ordinary_unary_operation + expression .
ordinary_unary_combo = { ordinary_unary_operation ~ expression }

power = {"**"}
divided_by = {"/"}
modulo = {"mod"}
times = {"*"}
and = { "and" }
exclusive_or = {"xor"}
minus = {"-"}
non_exclusive_or = {"or"}
plus = {"+"}

parameter_sign = {"#"}
/// operations in the first group are to be performed before operations in the second group and so on
/// If an expression contains more than one operation from the same group, the operation on the left is performed first.
binary_operation1 = _{power}
binary_operation2 = _{ divided_by | modulo | times }
binary_operation3 = _{and | exclusive_or | minus | non_exclusive_or | plus }

///mid_line_letter = 
letter_a  = { ^"a"} 
letter_b  = { ^"b"} 
letter_c  = { ^"c"} 
letter_d  = { ^"d"} 
letter_f  = { ^"f"} 
letter_g  = { ^"g"} 
letter_h  = { ^"h"} 
letter_i  = { ^"i"} 
letter_j  = { ^"j"} 
letter_k  = { ^"k"} 
letter_l  = { ^"l"} 
letter_m  = { ^"m"} 
letter_p  = { ^"p"} 
letter_q  = { ^"q"} 
letter_r  = { ^"r"} 
letter_s  = { ^"s"} 
letter_t  = { ^"t"} 
letter_x  = { ^"x"} 
letter_y  = { ^"y"} 
letter_z  = { ^"z"}
